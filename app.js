// Generated by CoffeeScript 1.6.3
(function() {
  var Attempt, AttemptView, Block, BlockView, Stimulus, StimulusView, Trial, block,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  Stimulus = (function() {
    function Stimulus(type, key) {
      this.type = type;
      this.key = key.toUpperCase();
    }

    Stimulus.prototype.clone = function() {
      return new Stimulus(this.type, this.key);
    };

    return Stimulus;

  })();

  StimulusView = (function() {
    function StimulusView(stimulus) {
      this.stimulus = stimulus;
      this.elem = $('<div>').addClass('stimulus').addClass(this.stimulus.type);
    }

    return StimulusView;

  })();

  Attempt = (function() {
    function Attempt(trial) {
      this.trial = trial;
      this.stimulus = this.trial.stimuli[Math.floor(Math.random() * this.trial.stimuli.length)];
      this.success = null;
      this.response = null;
      this.time = null;
    }

    Attempt.prototype.completed = function() {
      return this.response;
    };

    Attempt.prototype.answer = function(key) {
      this.response = key;
      return this.success = this.stimulus.key === key;
    };

    return Attempt;

  })();

  AttemptView = (function() {
    function AttemptView(attempt) {
      var view,
        _this = this;
      this.attempt = attempt;
      this.elem = $('<div>').addClass('attempt');
      view = new StimulusView(this.attempt.stimulus);
      this.elem.html(view.elem);
      $(window).on('keydown', function(event) {
        var key;
        key = String.fromCharCode(event.which);
        if (__indexOf.call(_this.attempt.trial.keys, key) >= 0) {
          _this.attempt.answer(key);
          if (_this.attempt.success) {
            return _this.elem.html('Success');
          } else {
            return _this.elem.html('BOOOHHH!');
          }
        }
      });
    }

    return AttemptView;

  })();

  Trial = (function() {
    function Trial() {
      var stimuli;
      stimuli = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.stimuli = stimuli;
      this.keys = this.stimuli.map(function(stimulus) {
        return stimulus.key;
      });
    }

    return Trial;

  })();

  Block = (function() {
    function Block() {
      var n, trial, trials, _i, _j, _len, _ref, _ref1;
      n = arguments[0], trials = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this.n = n;
      this.trials = trials;
      this.collection = [];
      for (n = _i = 0, _ref = this.n; 0 <= _ref ? _i < _ref : _i > _ref; n = 0 <= _ref ? ++_i : --_i) {
        this.collection[n] = [];
        _ref1 = this.trials;
        for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
          trial = _ref1[_j];
          this.collection[n].push(new Attempt(trial));
        }
      }
    }

    Block.prototype.completed = function() {
      var attempt, attempts, _i, _j, _len, _len1, _ref;
      _ref = this.collection;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attempts = _ref[_i];
        for (_j = 0, _len1 = attempts.length; _j < _len1; _j++) {
          attempt = attempts[_j];
          console.log(attempt.response);
          if (attempt.response === null) {
            return false;
          }
        }
      }
      return true;
    };

    return Block;

  })();

  BlockView = (function() {
    BlockView.loadingTime = 200;

    BlockView.loadingIcon = '*';

    function BlockView(block) {
      var _this = this;
      this.block = block;
      this.elem = $('<div>').addClass('block');
      this.curr = 0;
      this.next();
      $(window).on('click', function(event) {
        console.log(_this.block.completed());
        if (_this.block.completed()) {
          return _this.next();
        }
      });
    }

    BlockView.prototype.next = function() {
      var _this = this;
      if (this.curr < this.block.n) {
        this.elem.html(BlockView.loadingIcon);
        $(window).off('keydown');
        return setTimeout(function() {
          _this.elem.html('');
          return _this.showTrial();
        }, BlockView.loadingTime);
      } else {
        return console.log('End!');
      }
    };

    BlockView.prototype.showTrial = function() {
      var attempt, view, _i, _len, _ref;
      _ref = this.block.collection[this.curr];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attempt = _ref[_i];
        view = new AttemptView(attempt);
        this.elem.append(view.elem);
      }
      return this.curr++;
    };

    return BlockView;

  })();

  block = new Block(2, new Trial(new Stimulus('square', 'j'), new Stimulus('circle', 'k')), new Trial(new Stimulus('sun', 's'), new Stimulus('moon', 'd')));

  new BlockView(block).elem.appendTo($('body'));

}).call(this);
