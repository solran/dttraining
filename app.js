// Generated by CoffeeScript 1.6.3
(function() {
  var Block, BlockView, Stimulus, StimulusView, Trial, TrialView, block,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Stimulus = (function() {
    function Stimulus(type, key) {
      this.type = type;
      this.key = key.toUpperCase();
    }

    Stimulus.prototype.clone = function() {
      return new Stimulus(this.type, this.key);
    };

    return Stimulus;

  })();

  StimulusView = (function() {
    function StimulusView(stimulus) {
      this.stimulus = stimulus;
      this.elem = $('<div>').addClass('stimulus').addClass(this.stimulus.type);
    }

    return StimulusView;

  })();

  Trial = (function() {
    function Trial() {
      var stimuli;
      stimuli = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.stimuli = stimuli;
      this.keys = this.stimuli.map(function(stimulus) {
        return stimulus.key;
      });
    }

    return Trial;

  })();

  TrialView = (function() {
    function TrialView(trial) {
      var stim, view,
        _this = this;
      this.trial = trial;
      this.elem = $('<div>').addClass('trial');
      stim = this.trial.stimuli[Math.floor(Math.random() * this.trial.stimuli.length)].clone();
      view = new StimulusView(stim);
      this.elem.html(view.html);
      $(window).on('keydown', function(event) {
        var key;
        key = String.fromCharCode(event.which);
        if (__indexOf.call(_this.trial.keys, key) >= 0) {
          if (key === stim.key) {
            return _this.elem.html('Success');
          } else {
            return _this.elem.html('BOOOHHH!');
          }
        }
      });
    }

    return TrialView;

  })();

  Block = (function() {
    function Block() {
      var n, trials;
      n = arguments[0], trials = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this.n = n;
      this.trials = trials;
    }

    return Block;

  })();

  BlockView = (function() {
    BlockView.loadingTime = 2000;

    BlockView.loadingIcon = '<u>*</u>';

    function BlockView(block) {
      var _this = this;
      this.block = block;
      this.elem = $('<div>').addClass('block');
      this.curr = 0;
      $(window).on('click', function(event) {
        return _this.next();
      });
    }

    BlockView.prototype.next = function() {
      var _this = this;
      if (this.curr++ < this.block.n) {
        this.elem.html(BlockView.loadingIcon);
        $(window).off('keydown');
        return setTimeout(function() {
          _this.elem.html('');
          return _this.showTrial();
        }, BlockView.loadingTime);
      } else {
        return console.log('End!');
      }
    };

    BlockView.prototype.showTrial = function() {
      var t, view, _i, _len, _ref, _results;
      _ref = this.block.trials;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        view = new TrialView(t);
        _results.push(this.elem.append(view.html));
      }
      return _results;
    };

    return BlockView;

  })();

  block = new Block(10, new Trial(new Stimulus('square', 'j'), new Stimulus('circle', 'k')), new Trial(new Stimulus('sun', 's'), new Stimulus('moon', 'd')));

  new BlockView(block).html.appendTo($('body'));

}).call(this);
